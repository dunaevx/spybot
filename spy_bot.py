import random
import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from collections import defaultdict

API_TOKEN = os.getenv('API_TOKEN')
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

game_data = {
    'in_progress': False,
    'registration_open': False,
    'players': set(),
    'roles': {},
    'word': '',
    'spy_count': 1,
    'votes': defaultdict(int),
    'chat_id': None
}

registration_message = None
WORDS =  [
    '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–ø–∏—Ü—Ü–µ—Ä–∏—è', '–ø–ª—è–∂', '–∞—ç—Ä–æ–ø–æ—Ä—Ç', '—à–∫–æ–ª–∞', '–±–æ–ª—å–Ω–∏—Ü–∞', '–∫–∞—Ñ–µ', '–ø–æ–µ–∑–¥', '–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
    '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–ø–∞—Ä–∫', '–º—É–∑–µ–π', '–∑–æ–æ–ø–∞—Ä–∫', '–º–∞–≥–∞–∑–∏–Ω', '–º–µ—Ç—Ä–æ', '–∞–≤—Ç–æ–±—É—Å', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–±–∞–Ω–∫',
    '–æ—Ñ–∏—Å', '—Å–ø–æ—Ä—Ç–∑–∞–ª', '—Ç—é—Ä—å–º–∞', '—Ç–µ–∞—Ç—Ä', '—Ü–µ—Ä–∫–æ–≤—å', '—Å—Ç–∞–¥–∏–æ–Ω', '–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å', '—Ñ–µ—Ä–º–∞',
    '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞', '–Ω–æ—á–Ω–æ–π –∫–ª—É–±', '—Å–≤–∞–¥—å–±–∞', '–ø–æ—Ö–æ—Ä–æ–Ω—ã', '–ø–æ–∂–∞—Ä–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è', '–≤–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞',
    '–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥', '–≥–∞—Ä–∞–∂', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–ª–∞–≥–µ—Ä—å', '—Å–∞—É–Ω–∞', '—Ä—ã–±–∞–ª–∫–∞', '–∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞', '–ø–µ–∫–∞—Ä–Ω—è',
    '–∫–æ—Å–º–æ–¥—Ä–æ–º', '–ø–∞—Ä–æ—Ö–æ–¥', '–ø–æ—Ä—Ç', '—Ä—ã–Ω–æ–∫', '–∫–æ–Ω—Ü–µ—Ä—Ç', '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', '–∞–≤—Ç–æ—Å—Ç–æ—è–Ω–∫–∞', '–≥–æ—Ä—É',
    '–≥—Ä–∞–Ω–∏—Ü–∞', '–ø—É—Å—Ç—ã–Ω—è', '–ª–µ—Å', '–≤—É–ª–∫–∞–Ω', '–∑–∞–≤–æ–¥', '—à–∞—Ö—Ç–∞', '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è', '–ø–µ–π–Ω—Ç–±–æ–ª', '–±–æ—É–ª–∏–Ω–≥',
    '—Ç—Ä–µ–Ω–∏–Ω–≥', '–ø–ª—è–∂–Ω—ã–π –±–∞—Ä', '—Å—Ç–æ–ª–æ–≤–∞—è', '–±–∞—Å—Å–µ–π–Ω', '–∫–ª—É–± –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä', '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞',
    '—É—á–∞—Å—Ç–æ–∫ –ø–æ–ª–∏—Ü–∏–∏', '–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è', '–∫—Ä–µ–π—Å–µ—Ä', '—Ñ—É—Ç–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ', '–≥–æ–ª—å—Ñ-–∫–ª—É–±',
    '–º–∞—Å—Å–∞–∂–Ω—ã–π —Å–∞–ª–æ–Ω', '–ø—Ä–∞—á–µ—á–Ω–∞—è', '–∫–∞–∑–∏–Ω–æ', '–±—É–Ω–∫–µ—Ä', '—Ç–µ–ª–µ—Å—Ç—É–¥–∏—è', '—Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è', '—Å—É–¥',
    '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '–∫—É—Ö–Ω—è', '—Ü–∏—Ä–∫', '—Ç–∞–Ω—Ü–ø–æ–ª', '–¥–∏—Å–∫–æ—Ç–µ–∫–∞', '–∫–∏–Ω–æ—Å—Ç—É–¥–∏—è', '–∑–æ–æ–º–∞–≥–∞–∑–∏–Ω', '—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂',
    '–±–∞—Ä–±–µ—Ä—à–æ–ø', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è', '–≤–∏–Ω–æ–¥–µ–ª—å–Ω—è', '—Ä–µ–º–æ–Ω—Ç–Ω–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è', '–∞—Ç–µ–ª—å–µ', '–≥–∞–ª–µ—Ä–µ—è',
    '–∞–∫–≤–∞–ø–∞—Ä–∫', '–∏–≥—Ä–æ–≤–æ–π –∑–∞–ª', '–∑–∞–ø—Ä–∞–≤–∫–∞', '—á–µ–º–ø–∏–æ–Ω–∞—Ç', '–º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è', '–∞–≤—Ç–æ—à–∫–æ–ª–∞', '–≤–µ—Ä—Ç–æ–ª—ë—Ç–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
    '—Å–≤–∞–ª–∫–∞', '–ª–∏—Ñ—Ç', '—á–µ—Ä–¥–∞–∫', '–ø–æ–¥–≤–∞–ª', '–≤–æ–¥–æ–æ—á–∏—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è', '–∑–æ–æ–ø–∏—Ç–æ–º–Ω–∏–∫', '–æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è',
    '—Ä–µ–∫–ª–∞–º–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–∫–∞—Ñ–µ–¥—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞', '—á–∏—Ç–∞–ª—å–Ω—ã–π –∑–∞–ª', '—Å–∞–¥–æ–≤–æ–¥—á–µ—Å–∫–æ–µ —Ç–æ–≤–∞—Ä–∏—â–µ—Å—Ç–≤–æ'
]

RULES_TEXT = """
üé≤ **–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã "–®–ø–∏–æ–Ω"**

1. –í –∏–≥—Ä–µ —É—á–∞—Å—Ç–≤—É—é—Ç –º–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –∏ —à–ø–∏–æ–Ω—ã.
2. –ú–∏—Ä–Ω—ã–µ –∑–Ω–∞—é—Ç —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –¥–æ–ª–∂–Ω—ã –µ–≥–æ –∑–∞—â–∏—â–∞—Ç—å.
3. –®–ø–∏–æ–Ω—ã –Ω–µ –∑–Ω–∞—é—Ç —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –¥–æ–ª–∂–Ω—ã —É–≥–∞–¥–∞—Ç—å –µ–≥–æ, –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è.
4. –ò–≥—Ä–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —Ä–∞—É–Ω–¥–∞—Ö:
   - –û–±—Å—É–∂–¥–µ–Ω–∏–µ (2 –º–∏–Ω—É—Ç—ã): –∏–≥—Ä–æ–∫–∏ –æ–±—â–∞—é—Ç—Å—è –≤ —á–∞—Ç–µ, –ø—ã—Ç–∞—è—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —à–ø–∏–æ–Ω–æ–≤.
   - –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –≤—Å–µ –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ —à–ø–∏–æ–Ω–∞.
5. –ï—Å–ª–∏ –≤—Å–µ —à–ø–∏–æ–Ω—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã ‚Äî –ø–æ–±–µ–∂–¥–∞—é—Ç –º–∏—Ä–Ω—ã–µ.
6. –ï—Å–ª–∏ —à–ø–∏–æ–Ω—ã —É–≥–∞–¥—ã–≤–∞—é—Ç —Å–ª–æ–≤–æ –∏–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ ‚Äî –ø–æ–±–µ–∂–¥–∞—é—Ç —à–ø–∏–æ–Ω—ã.
7. –ï—Å–ª–∏ –≤ –∏–≥—Ä–µ –æ—Å—Ç–∞—ë—Ç—Å—è –≤—Å–µ–≥–æ 2 –∏–≥—Ä–æ–∫–∞, –∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –µ—Å—Ç—å —à–ø–∏–æ–Ω ‚Äî —à–ø–∏–æ–Ω –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
–£–¥–∞—á–∏!
"""

def reset_game_data():
    game_data.update({
        'in_progress': False,
        'registration_open': False,
        'players': set(),
        'roles': {},
        'word': '',
        'spy_count': 1,
        'votes': defaultdict(int),
        'chat_id': None
    })

async def on_startup(dispatcher):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"),
        BotCommand(command="ready", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É"),
        BotCommand(command="end", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ"),
        BotCommand(command="rules", description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"),
        BotCommand(command="chatid", description="–ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"),
    ]
    await bot.set_my_commands(commands)

@dp.message_handler(commands=['start'])
async def start_game(message: types.Message):
    if game_data['in_progress']:
        await message.reply("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
        return

    game_data.update({
        'chat_id': message.chat.id,
        'players': set(),
        'roles': {},
        'votes': defaultdict(int),
        'in_progress': True,
        'registration_open': True
    })

    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å", callback_data="join_game"))

    global registration_message
    registration_message = await message.answer(
        "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ù–∞–∂–º–∏—Ç–µ '–ò–≥—Ä–∞—Ç—å', —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\nüë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: –Ω–∏–∫—Ç–æ",
        reply_markup=keyboard
    )


@dp.message_handler(commands=['ready'])
async def ready_start(message: types.Message):
    if game_data['in_progress'] and game_data['registration_open']:
        game_data['registration_open'] = False
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é. –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!")
        await assign_roles()
    else:
        await message.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")


@dp.message_handler(commands=['end'])
async def end_game(message: types.Message):
    global registration_message
    if game_data['in_progress']:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        for pid in game_data['players']:
            try:
                await bot.send_message(pid, "üõë –ò–≥—Ä–∞ –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            except:
                pass

        reset_game_data()
        registration_message = None
        await message.answer("üõë –ò–≥—Ä–∞ –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")


@dp.message_handler(commands=['rules'])
async def send_rules(message: types.Message):
    await message.answer(RULES_TEXT, parse_mode='Markdown')


@dp.callback_query_handler(lambda c: c.data == 'join_game')
async def join_game(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    user_id = user.id

    if user_id in game_data['players']:
        await callback_query.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°
        await bot.send_message(user_id, "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ!")
    except Exception:
        await bot.send_message(
            game_data['chat_id'],
            f"‚ùó <a href='tg://user?id={user_id}'>{user.full_name}</a> –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞. "
            f"–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            parse_mode='HTML'
        )
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        return

    game_data['players'].add(user_id)
    await callback_query.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

    global registration_message
    if registration_message:
        text = "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ù–∞–∂–º–∏—Ç–µ '–ò–≥—Ä–∞—Ç—å', —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"
        text += "üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:\n" + "\n".join(
            [f"‚Ä¢ <a href='tg://user?id={pid}'>{(await bot.get_chat_member(game_data['chat_id'], pid)).user.full_name}</a>"
             for pid in game_data['players']]
        )

        try:
            await bot.edit_message_text(
                text,
                chat_id=game_data['chat_id'],
                message_id=registration_message.message_id,
                reply_markup=callback_query.message.reply_markup,
                parse_mode='HTML'
            )
        except:
            pass


async def assign_roles():
    global registration_message
    players = list(game_data['players'])
    if len(players) < 3:
        await bot.send_message(game_data['chat_id'], "‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3).")
        reset_game_data()
        return

    registration_message = None
    game_data['word'] = random.choice(WORDS)
    game_data['spy_count'] = max(1, len(players) // 5)
    spies = set(random.sample(players, game_data['spy_count']))

    for pid in players:
        role = "—à–ø–∏–æ–Ω" if pid in spies else "–º–∏—Ä–Ω—ã–π"
        game_data['roles'][pid] = role
        msg = (
            "üîé –í—ã —à–ø–∏–æ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ –≤ –≥—Ä—É–ø–ø–µ (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ)."
            if role == '—à–ø–∏–æ–Ω' else f"üïäÔ∏è –í—ã –º–∏—Ä–Ω—ã–π. –°–ª–æ–≤–æ: {game_data['word']}"
        )
        try:
            await bot.send_message(pid, msg)
        except:
            await bot.send_message(game_data['chat_id'], f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É: {pid}")

    await start_round()


async def start_round():
    players = list(game_data['players'])
    names = []
    for pid in players:
        try:
            user = await bot.get_chat_member(game_data['chat_id'], pid)
            names.append(f"<a href='tg://user?id={pid}'>{user.user.full_name}</a>")
        except:
            names.append(str(pid))

    await bot.send_message(game_data['chat_id'], "üë• –ò–≥—Ä–æ–∫–∏ –≤ –∏–≥—Ä–µ:\n" + "\n".join(f"‚Ä¢ {name}" for name in names), parse_mode='HTML')
    await bot.send_message(game_data['chat_id'], "üó£Ô∏è –û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å. –£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã!")
    await asyncio.sleep(120)
    await bot.send_message(game_data['chat_id'], "‚è∞ –í—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é.")
    await start_voting()


async def start_voting():
    markup = InlineKeyboardMarkup(row_width=2)
    for pid in game_data['players']:
        try:
            user = await bot.get_chat_member(game_data['chat_id'], pid)
            markup.add(InlineKeyboardButton(user.user.full_name, callback_data=f"vote_{pid}"))
        except:
            markup.add(InlineKeyboardButton(str(pid), callback_data=f"vote_{pid}"))

    await bot.send_message(game_data['chat_id'], "üó≥Ô∏è –ì–æ–ª–æ—Å—É–µ–º –∑–∞ —à–ø–∏–æ–Ω–∞:", reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data.startswith("vote_"))
async def handle_vote(callback_query: types.CallbackQuery):
    voter = callback_query.from_user.id
    target = int(callback_query.data.split("_")[1])

    # –û–¥–∏–Ω –≥–æ–ª–æ—Å –æ—Ç –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    for pid in list(game_data['votes'].keys()):
        if pid == voter:
            await callback_query.answer("–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.")
            return

    game_data['votes'][target] += 1
    await callback_query.answer("–ì–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç.")

    if sum(game_data['votes'].values()) >= len(game_data['players']):
        await bot.send_message(game_data['chat_id'], "üì© –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏. –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏...")
        await finish_voting()


async def finish_voting():
    if not game_data['votes']:
        await bot.send_message(game_data['chat_id'], "‚ùó –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª.")
        reset_game_data()
        return

    max_votes = max(game_data['votes'].values())
    eliminated = [pid for pid, count in game_data['votes'].items() if count == max_votes]

    eliminated_names = []
    for pid in eliminated:
        try:
            user = await bot.get_chat_member(game_data['chat_id'], pid)
            eliminated_names.append(f"<a href='tg://user?id={pid}'>{user.user.full_name}</a>")
        except:
            eliminated_names.append(str(pid))

    await bot.send_message(game_data['chat_id'], f"‚ùå –í—ã–±—ã–≤–∞—é—Ç: {', '.join(eliminated_names)}", parse_mode='HTML')

    remaining = game_data['players'] - set(eliminated)
    spies = [pid for pid in remaining if game_data['roles'][pid] == '—à–ø–∏–æ–Ω']
    peaceful = [pid for pid in remaining if game_data['roles'][pid] == '–º–∏—Ä–Ω—ã–π']

    # –£—Å–ª–æ–≤–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–±–µ–¥—ã —à–ø–∏–æ–Ω–∞ –ø—Ä–∏ 2 –∏–≥—Ä–æ–∫–∞—Ö –∏ –Ω–∞–ª–∏—á–∏–∏ —à–ø–∏–æ–Ω–∞
    if len(remaining) == 2 and len(spies) >= 1:
        await bot.send_message(game_data['chat_id'], "üïµÔ∏è –í –∏–≥—Ä–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 2 –∏–≥—Ä–æ–∫–∞, –∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –µ—Å—Ç—å —à–ø–∏–æ–Ω. –ü–æ–±–µ–¥–∞ —à–ø–∏–æ–Ω–∞!")
        for pid in remaining:
            try:
                await bot.send_message(pid, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞: –ü–æ–±–µ–¥–∞ —à–ø–∏–æ–Ω–∞!")
            except:
                pass
        await reveal_roles()
        reset_game_data()
        return

    if not spies:
        await bot.send_message(game_data['chat_id'], "üéâ –ü–æ–±–µ–¥–∞ –º–∏—Ä–Ω—ã—Ö!")
        for pid in remaining:
            try:
                await bot.send_message(pid, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞: –ü–æ–±–µ–¥–∞ –º–∏—Ä–Ω—ã—Ö!")
            except:
                pass
        await reveal_roles()  
        reset_game_data()
    elif not peaceful:
        await bot.send_message(game_data['chat_id'], f"üïµÔ∏è –ü–æ–±–µ–¥–∞ —à–ø–∏–æ–Ω–æ–≤! –°–ª–æ–≤–æ –±—ã–ª–æ: {game_data['word']}")
        for pid in remaining:
            try:
                await bot.send_message(pid, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞: –ü–æ–±–µ–¥–∞ —à–ø–∏–æ–Ω–æ–≤!")
            except:
                pass
        await reveal_roles()  
        reset_game_data()
    else:
        game_data['players'] = remaining
        game_data['votes'].clear()
        await bot.send_message(game_data['chat_id'], "üîÅ –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥...")
        await start_round()


async def reveal_roles():
    role_list = []
    for pid, role in game_data['roles'].items():
        try:
            user = await bot.get_chat_member(game_data['chat_id'], pid)
            name = user.user.full_name
        except:
            name = str(pid)
        role_list.append(f"‚Ä¢ <a href='tg://user?id={pid}'>{name}</a> ‚Äî {role}")
    await bot.send_message(
        game_data['chat_id'],
        "üßæ –†–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(role_list),
        parse_mode='HTML'
    )


@dp.message_handler(lambda message: game_data['in_progress'] and message.chat.id == game_data['chat_id'])
async def guess_by_spy(message: types.Message):
    user_id = message.from_user.id
    role = game_data['roles'].get(user_id)
    guessed = message.text.strip().lower()
    target = game_data['word'].strip().lower()

    if role == '—à–ø–∏–æ–Ω' and guessed == target:
        await bot.send_message(game_data['chat_id'],
                               f"üéØ –®–ø–∏–æ–Ω <a href='tg://user?id={user_id}'>{message.from_user.full_name}</a> —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ: {game_data['word']}",
                               parse_mode='HTML')
        await bot.send_message(game_data['chat_id'], "üïµÔ∏è –ü–æ–±–µ–¥–∞ —à–ø–∏–æ–Ω–æ–≤!")
        for pid in game_data['players']:
            try:
                await bot.send_message(pid, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞: –ü–æ–±–µ–¥–∞ —à–ø–∏–æ–Ω–æ–≤!")
            except:
                pass
        await reveal_roles()
        reset_game_data()


@dp.message_handler(commands=['chatid'])
async def show_chat_id(message: types.Message):
    await message.reply(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {message.chat.id}, —Ç–∏–ø: {message.chat.type}")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)